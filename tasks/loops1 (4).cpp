#include <iostream>
#include <time.h>
using namespace std;

/* 1. С клавиатуры вводится целое число любой разрядности. Определить количество цифр в нём и их сумму. */

//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int num;
//	int count;
//	int sum = 0;
//	int loop = 1;
//
//	do
//	{
//		count = 0;
//
//		//Проверка на отрицательное число
//		do
//		{
//			cout << "Введите число: ";
//			cin >> num;
//
//			if (num > 0)
//				break;
//			else
//				cout << "Введите число больше 0!\n\n";
//
//		} while (num <= 0);
//
//		//Вычисление
//		while (num > 0)
//		{
//			sum += (num % 10);
//			num /= 10;
//			count++;
//		}
//
//		cout << "\nКоличество цифр = " << count;
//		cout << "\nСумма всех чисел = " << sum;
//
//		//Повтор
//		do
//		{
//			cout << "\n\nХотите запустить программу заново? 1 - Да, 2 - Нет\n--> ";
//			cin >> loop;
//
//			cout << endl;
//
//		} while (loop != 1 && loop != 2);
//
//	} while (loop == 1);
//
//	return 0;
//}



/* 2. С клавиатуры вводится целое число любой разрядности. Необходимо перевернуть это число, т.е. цифры должны располагаться в обратном порядке (например, вводим число 1234 – в результате будет 4321). */

//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int num;
//	int temp;
//	int loop = 1;
//
//	do
//	{
//		//Проверка на отрицательное число
//		do
//		{
//			cout << "Введите число: ";
//			cin >> num;
//
//			if (num > 0)
//				break;
//			else
//				cout << "Введите число больше 0!\n\n";
//
//		} while (num <= 0);
//
//		cout << "\nВаше перевёрнутое число: ";
//
//		//Вычисление
//		while (num > 0)
//		{
//			temp = (num % 10);
//			cout << temp;
//			num /= 10;
//		}
//
//		//Повтор
//		do
//		{
//			cout << "\n\nХотите запустить программу заново? 1 - Да, 2 - Нет\n--> ";
//			cin >> loop;
//
//			cout << endl;
//
//		} while (loop != 1 && loop != 2);
//
//	} while (loop == 1);
//
//	return 0;
//}



/* 3. С клавиатуры вводится целое число. Вывести на экран все числа, на которые введённое число делится без остатка. Например, для 60 такими числами станут 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60. */

//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int num;
//	int loop = 1;
//	int i;
//
//	do
//	{
//		//Проверка на отрицательное число
//		do
//		{
//			cout << "Введите число: ";
//			cin >> num;
//
//			if (num > 0)
//				break;
//			else
//				cout << "Введите число больше 0!\n\n";
//
//		} while (num <= 0);
//
//		cout << "\nЧисла, на которые оно делится без остатка: ";
//
//		//Вычисление
//		
//		for (i = 1; i <= num; i++)
//		{
//			if (num % i == 0)
//			{
//				cout << i;
//
//				if (i != num)
//					cout << ", ";
//			}
//		}
//
//		//Повтор
//		do
//		{
//			cout << "\n\nХотите запустить программу заново? 1 - Да, 2 - Нет\n--> ";
//			cin >> loop;
//
//			cout << endl;
//
//		} while (loop != 1 && loop != 2);
//
//	} while (loop == 1);
// 
// return 0;
//}



/* 4. С клавиатуры вводится целое число. Определить, является ли оно простым. Простое число делится без остатка только на 1 и само на себя. */

//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int num;
//	int loop = 1;
//	bool res;
//
//	do
//	{
//		res = true;
//
//		//Проверка на отрицательное число
//		do
//		{
//			cout << "Введите число: ";
//			cin >> num;
//
//			if (num > 1)
//				break;
//			else
//				cout << "Введите число больше 1!\n\n";
//
//		} while (num <= 1);
//
//		//Вычисление
//		for (int i = 2; i < num; i++)
//		{
//			if (num % i == 0)
//			{
//				res = false;
//				break;
//			}
//		}
//
//		//Проверка
//		if (res == true)
//			cout << "\nЭто число простое!\n";
//		else
//			cout << "\nЭто число не простое!\n";
//
//		//Повтор
//		do
//		{
//			cout << "\n\nХотите запустить программу заново? 1 - Да, 2 - Нет\n--> ";
//			cin >> loop;
//
//			cout << endl;
//
//		} while (loop != 1 && loop != 2);
//
//	} while (loop == 1);
//
//	return 0;
//}



/* 5. Проверить, есть ли во введённом числе одинаковые цифры подряд. */

//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int num;
//	int t1, t2;
//	int loop = 1;
//	bool isTrue;
//
//	do
//	{
//		isTrue = true;
//
//		//Проверка на отрицательное число
//		do
//		{
//			cout << "Введите число: ";
//			cin >> num;
//
//			if (num > 0)
//				break;
//			else
//				cout << "Введите число больше 0!\n\n";
//
//		} while (num <= 0);
//
//		//Вычисление
//		while (num > 0)
//		{
//			t1 = num % 10;
//			num /= 10;
//			t2 = num % 10;
//
//			if (t1 == t2)
//			{
//				isTrue = false;
//				break;
//			}
//		}
//
//		if (isTrue == true)
//			cout << "\nВо введённом числе нету одинаковых цифр подряд!\n";
//		else
//			cout << "\nВо введённом числе есть одинаковые цифры подряд!\n";
//
//		//Повтор
//		do
//		{
//			cout << "\n\nХотите запустить программу заново? 1 - Да, 2 - Нет\n--> ";
//			cin >> loop;
//
//			cout << endl;
//
//		} while (loop != 1 && loop != 2);
//
//	} while (loop == 1);
// 
// return 0;
//}



/* 6. Ввести с клавиатуры число. Проверить, что все цифры этого числа расположены в неубывающем порядке (например, число 11299 соответствует условию, а число 22044 нет). */

//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int num;
//	int t1, t2;
//	int loop = 1;
//	bool isTrue;
//
//	do
//	{
//		isTrue = true;
//
//		//Проверка на отрицательное число
//		do
//		{
//			cout << "Введите число: ";
//			cin >> num;
//
//			if (num > 0)
//				break;
//			else
//				cout << "Введите число больше 0!\n\n";
//
//		} while (num <= 0);
//
//		//Вычисление
//		while (num > 0)
//		{
//			t1 = num % 10;
//			num /= 10;
//			t2 = num % 10;
//
//			if (t1 < t2)
//			{
//				isTrue = false;
//				break;
//			}
//		}
//
//		if (isTrue == true)
//			cout << "\nВсе цифры этого числа расположены в неубывающем порядке.\n";
//		else
//			cout << "\nВсе цифры этого числа не расположены в неубывающем порядке!\n";
//
//		//Повтор
//		do
//		{
//			cout << "\n\nХотите запустить программу заново? 1 - Да, 2 - Нет\n--> ";
//			cin >> loop;
//
//			cout << endl;
//
//		} while (loop != 1 && loop != 2);
//
//	} while (loop == 1);
// 
// return 0;
//}



/* 7. Написать игру «Угадай число». Пользователь мысленно загадывает число от 0 до 1000, компьютер отгадывает его за минимальное количество попыток. */

//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	srand(time(0)); rand();
//	int num;
//	int rand_num;
//	int min;
//	int max;
//
//	int isNum;
//	int isBigger;
//	bool isTrue;
//
//	int loop = 1;
//
//	do
//	{
//		do
//		{ 
//			min = 1;
//			max = 1000;
//			isTrue = true;
//
//			//Вычисление
//			rand_num = min + rand() % (max - min + 1);
//			cout << "Ваше число = " << rand_num;
//
//			//Проверка на правильный ввод
//			do
//			{
//				cout << "\nЭто правильное число? 1 - Да, 2 - Нет\n--> ";
//				cin >> isNum;
//
//			} while (isNum != 1 && isNum != 2);
//
//			//Проверка на правильное число
//			switch (isNum)
//			{
//
//				case 1:
//				{
//					cout << "\n\nЭто было просто.\n";
//					isTrue = false;
//					break;
//				}
//
//				case 2:
//				{
//					do
//					{
//						cout << "\nМоё число больше вашего? 1 - Да, 2 - Нет\n--> ";
//						cin >> isBigger;
//
//						cout << endl;
//
//					} while (isBigger != 1 && isBigger != 2);
//
//					if (isBigger == 1)
//						max = rand_num;
//					else if (isBigger == 2)
//						min = rand_num;
//				}
//			}
//
//		} while (isTrue == true);
//
//		//Повтор
//		do
//		{
//			cout << "\n\nХотите запустить программу заново? 1 - Да, 2 - Нет\n--> ";
//			cin >> loop;
//
//			cout << endl;
//
//		} while (loop != 1 && loop != 2);
//
//	} while (loop == 1);
// 
//	return 0;
//}



/* 8. Показать номера и общее количество всех счастливых трамвайных билетов с шестизначными номерами. */

//int main()
//{
//	int count = 0;
//	int n1, n2, n3;
//	int n4, n5, n6;
//
//	for (int i = 1; i <= 999999; i++)
//	{
//		n1 = i / 100000;
//		n2 = i / 10000 % 10;
//		n3 = i / 1000 % 10;
//		n4 = i / 100 % 10;
//		n5 = i / 10 % 10;
//		n6 = i % 10;
//
//		if ((n1 + n2 + n3) == (n4 + n5 + n6))
//		{
//			cout << n1 << n2 << n3 << n4 << n5 << n6;
//
//			if (i < 999999)
//				cout << ", ";
//
//			count++;
//		}
//	}
//
//	cout << "\n\nTotal num count = " << count << endl;
//
//	return 0;
//}



/* 9. Написать программу, позволяющую переводить любое число из десятичной системы счисления в 2, 8 и 16 - ричную систему. */

//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int num;
//	int choice;
//
//	int temp;
//	unsigned __int64 res;
//
//	int loop = 1;
//
//	do
//	{
//		res = 1;
//
//		//Выбор системы
//		do
//		{
//			cout << "Выберите в какую систему счисления вы хотите перевести ваше число:\n1 | 2-ричная\n2 | 8-ричная\n3 | 16 - ричная\n\n--> ";
//			cin >> choice;
//
//			if (choice == 1 || choice == 2 || choice == 3)
//				break;
//
//			cout << endl;
//
//		} while (choice != 1 && choice != 2 && choice != 3);
//
//		//Проверка на отрицательное число
//		do
//		{
//			cout << "\nВведите 10-ричное число: ";
//			cin >> num;
//
//			if (num > 0)
//				break;
//			else
//				cout << "Введите число больше 0!\n\n";
//
//		} while (num <= 0);
//
//		cout << "\nВаше число: ";
//
//		//Вычисление
//		switch (choice)
//		{
//			case 1:
//			{
//				//Запись числа
//				while (num > 0)
//				{
//					temp = num % 2;
//					res = (res * 10) + temp;
//					num /= 2;
//				}
//
//				//Число наоборот
//				while (res > 1)
//				{
//					temp = res % 10;
//					cout << temp;
//					res /= 10;
//				}
//
//				break;
//			}
//			
//		//-------------------------------------------------------------------//
//
//			case 2:
//			{
//				//Запись числа
//				while (num > 0)
//				{
//					temp = num % 8;
//					res = (res * 10) + temp;
//					num /= 8;
//				}
//
//				//Число наоборот
//				while (res > 1)
//				{
//					temp = res % 10;
//					cout << temp;
//					res /= 10;
//				}
//
//				break;
//			}
//
//		//-------------------------------------------------------------------//
//
//			case 3:
//			{
//				cout << hex << num;
//
//				break;
//			}
//		}
//
//		//Повтор
//		do
//		{
//			cout << "\n\nХотите запустить программу заново? 1 - Да, 2 - Нет\n--> ";
//			cin >> loop;
//
//			cout << endl;
//
//		} while (loop != 1 && loop != 2);
//
//	} while (loop == 1);
// 
//	return 0;
//}



/*	10.	Реализовать игровую программу «Однорукий бандит» (игровой автомат). В начале игры пользователю выдаётся 5000 кредитов. Случайным образом на барабанчиках выпадает три значения от 0 до 7.
    Призовые комбинации : 0 0 0, 1 1 1, 2 2 2, 3 3 3, 4 4 4, 5 Х Х, 5 5 Х, 5 5 5, 7 Х Х, 7 7 Х, 7 7 7 (на месте Х может быть любая цифра). Штрафная комбинация : 6 6 6. Все остальные комбинации нейтральные. 
    В любом случае, за показ новой комбинации с игрового счёта пользователя снимается определённая фиксированная сумма денег. Необходимо назначить различные вознаграждения за выпадение призовых комбинаций.
    Комбинации можно показывать через MessageBox, например. Зациклить работу приложения. Игра заканчивается поражением, если деньги закончились. Игра заканчивается победой, если выпадает джек - пот(7 7 7). */

//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	srand(time(0)); rand();
//	int currency = 5000;
//	int loop = 1;
//
//	int n1, n2, n3;
//
//	cout << "Добро пожаловать в 'Однорукий бандит!'\n\n";
//
//	while (currency > 99)
//	{
//		cout << "Ваши кредиты = " << currency;
//
//		//Повтор
//		do
//		{
//			cout << "\n\nВведите действие:\n1 - Продолжить играть\n2 - Конец игры\n--> ";
//			cin >> loop;
//
//			cout << endl;
//
//			switch (loop)
//			{
//				case 1:
//					break;
//				case 2:
//					return 0;
//			}
//
//		} while (loop != 1 && loop != 2);
//
//		currency -= 100;
//
//		n1 = rand() % 10;
//		n2 = rand() % 10;
//		n3 = rand() % 10;
//
//		cout << "\n----> " << n1 << " " << n2 << " " << n3 << " <----\n\n";
//
//		if (n1 == 5)
//		{
//			cout << "Успех! Начислено 300 кредитов.";
//			currency += 300;
//		}
//
//		else if (n1 == 7)
//		{
//			cout << "Успех! Начислено 400 кредитов.";
//			currency += 400;
//		}
//
//		else if (n1 == 5 && n2 == 5)
//		{
//			cout << "Успех! Начислено 600 кредитов.";
//			currency += 600;
//		}
//
//		else if (n1 == 7 && n2 == 7)
//		{
//			cout << "Успех! Начислено 800 кредитов.";
//			currency += 800;
//		}
//
//		else if (n1 == 0 && n2 == 0 && n3 == 0)
//		{
//			cout << "Успех! Начислено 1000 кредитов.";
//			currency += 1000;
//		}
//
//		else if (n1 == 1 && n2 == 1 && n3 == 1)
//		{
//			cout << "Успех! Начислено 1100 кредитов.";
//			currency += 1100;
//		}
//
//		else if (n1 == 2 && n2 == 2 && n3 == 2)
//		{
//			cout << "Успех! Начислено 1200 кредитов.";
//			currency += 1200;
//		}
//
//		else if (n1 == 3 && n2 == 3 && n3 == 3)
//		{
//			cout << "Успех! Начислено 1300 кредитов.";
//			currency += 1300;
//		}
//
//		else if (n1 == 4 && n2 == 4 && n3 == 4)
//		{
//			cout << "Успех! Начислено 1400 кредитов.";
//			currency += 1400;
//		}
//
//		else if (n1 == 5 && n2 == 5 && n3 == 5)
//		{
//			cout << "Успех! Начислено 1500 кредитов.";
//			currency += 1500;
//		}
//
//		else if (n1 == 6 && n2 == 6 && n3 == 6)
//		{
//			cout << "Штрафная комбинация! Конец игры!\n";
//			return 0;
//		}
//
//		else if (n1 == 7 && n2 == 7 && n3 == 7)
//		{
//			cout << "Джек пот!\n";
//			return 0;
//		}
//
//		cout << endl << endl << endl;
//	}
//
//	cout << "Кредиты закончились! Конец игры.\n";
//
//	return 0;
//}



/*	11.	Королю нужно убить дракона, но средства его казны – ограничены. Нужно создать программу, которая поможет рассчитать минимальное количество копейщиков, которое необходимо, чтобы убить дракона. 
  Данные очков здоровья и атаки дракона и одного копейщика вводятся с клавиатуры. Защиту, удачу, мораль, меткость и т.п. не учитывать. Копейщики наносят удар первыми (общий нанесённый урон – это сумма атак всех живых копейщиков).
  Если атака дракона превышает значение очков здоровья копейщика (например, у копейщика хп 10, а атака дракона - 15), то копейщик погибает, а оставшийся урон действует на оставшихся в живых копейщиков. 
  Например, жизнь дракона 500, атака 55, жизнь одного копейщика 10, атака 10, а количество копейщиков – 20 
  heroes.thelazy.net/wiki/List_of_creatures 
  Лог боя для данного примера должен выглядеть так:
		•	Копейщики атакуют (урон 200) – у дракона осталось 300 очков здоровья.
		•	Дракон атакует (урон 55) – осталось 15 копейщиков, один из которых ранен (осталось 5 очков здоровья).
		•	Копейщики атакуют (урон 150) – у дракона осталось 150 очков здоровья.
		•	Дракон атакует (урон 55) – осталось 9 копейщиков.
		•	Копейщики атакуют (урон 90) – у дракона осталось 60 очков здоровья.
		•	Дракон атакует (урон 55) – осталось 4 копейщика, один из которых ранен (осталось 5 жизней).
		•	Копейщики атакуют (урон 40) – у дракона осталось 20 очков здоровья.
		•	Дракон атакует  и побеждает. */

//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	int dragon_hp;
//	int dragon_dmg;
//	int temp_dd;
//
//	int peasant_dmg;
//	int peasant_hp;
//	int peasant_count;
//	int peasant_total_dmg;
//	int peasant_hp_wounded = 0;
//
//	cout << "HP дракона - ";
//	cin >> dragon_hp;
//
//	cout << "DMG дракона - ";
//	cin >> dragon_dmg;
//
//	cout << "\nHP копейщика - ";
//	cin >> peasant_hp;
//
//	cout << "DMG копейщика - ";
//	cin >> peasant_dmg;
//
//	cout << "Количество копейщиков - ";
//	cin >> peasant_count;
//
//	temp_dd = dragon_dmg;
//
//	cout << endl << endl;
//
//	while (dragon_hp > 0 && peasant_count > 0)
//	{
//		//Атака копейщиков
//		peasant_total_dmg = peasant_count * peasant_dmg;
//		dragon_hp -= peasant_total_dmg;
//
//		//Показать 0 вместо -N в логе
//		if (dragon_hp <= 0)
//			dragon_hp = 0;
//
//		//Вывод результатов
//		cout << "\t*    " << peasant_count << " копейщиков атакуют (общий урон = " << peasant_total_dmg << ")\n";
//		cout << "\t*    " << "HP дракона = " << dragon_hp;
//		cout << endl << endl;
//
//		//Проверка на HP дракона
//		if (dragon_hp <= 0)
//			break;
//
//		//Атака дракона
// 		while (dragon_dmg > 0)
//		{
//			//Проверка на раненого
//			if (peasant_hp > dragon_dmg)
//			{
//				peasant_hp_wounded = peasant_hp - dragon_dmg;
//				break;
//			}
//			
//			//Нанесение урона раненому
//			if (peasant_hp_wounded > 0)
//				dragon_dmg -= peasant_hp_wounded;
//
//			//Нанесение урона фулловым
//			else if(peasant_hp_wounded == 0)
//				dragon_dmg -= peasant_hp;
//
//			peasant_hp_wounded = 0;
//			peasant_count--;
//		}
//
//		//Возвращение изначальных значений dragon_dmg
//		dragon_dmg = temp_dd;
//
//		//Показать 0 вместо -N в логе
//		if (peasant_count <= 0)
//			peasant_count = 0;
//
//		//Вывод результатов
//		cout << "\t*    " << "Дракон атакует (урон = " << dragon_dmg << ")\n";
//		cout << "\t*    " << "Осталось " << peasant_count << " копейщиков";
//		
//		if (peasant_hp_wounded > 0)
//			cout << "\n\t*    " << "1 копейщик ранен, у него осталось " << peasant_hp_wounded << "HP";
//
//		cout << endl << endl;
//	}
//
//	if (dragon_hp <= 0)
//		cout << "\nДракон одержал поражение! Копейщики победили!\n";
//
//	else if (peasant_count <= 0)
//		cout << "\nДракон одержал победу! Все копейщики умерли.\n";
//
//	return 0;
//}